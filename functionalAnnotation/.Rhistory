# Remove .CEL.gz from the file names
colnames(exprMatrix) <- gsub(".CEL.gz","",colnames(exprMatrix))
CELdata <- ReadAffy(celfile.path = "./", compress="TRUE")
BiocManager::install("oligo")
library(oligo)
CELdata <- ReadAffy(celfile.path = "./", compress="TRUE")
CELdata <- ReadAffy(celfile.path = "./", compress="TRUE")
setwd("~/R/seniorProject")
library(org.Hs.eg.db)
library(pathview)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("include.R")
expressed <- read.csv(file="RESULTS-diseases-geneCompare_significant.csv")
#convert the eigth column(symbol) to Entrez Gene
expressedsymbol2eg <- id2eg(as.character(expressed[,1]),category="symbol",org="Hs")
print(head(upsymbol2eg))
library(org.Hs.eg.db)
BiocManager::install(c("GOFunction","org.Hs.eg.db","pathview","ReactomePA"))
BiocManager::install(c("GOFunction","org.Hs.eg.db","pathview","ReactomePA"))
library(org.Hs.eg.db)
library(pathview)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("include.R")
up <- read.csv(file="RESULTS-diseases-geneCompare_significant.csv")
#convert the eigth column(symbol) to Entrez Gene
upsymbol2eg <- id2eg(as.character(up[,1]),category="symbol",org="Hs")
print(head(upsymbol2eg))
up <- read.csv(file="RESULTS-IBS-geneProcessing_significant.csv")
#convert the eigth column(symbol) to Entrez Gene
upsymbol2eg <- id2eg(as.character(up[,1]),category="symbol",org="Hs")
print(head(upsymbol2eg))
# save the second column of upsymbol2eg map into a vector called entrez_up
entrez_up <- upsymbol2eg[,3]
dim(upsymbol2eg)
up <- read.csv(file="RESULTS-IBS-geneProcessing_significant.csv")
#convert the eigth column(symbol) to Entrez Gene
upsymbol2eg <- id2eg(as.character(up[,1]),category="symbol",org="Hs")
dim(upsymbol2eg)
print(head(upsymbol2eg))
up <- read.csv(file="downRG.csv")
#convert the eigth column(symbol) to Entrez Gene
upsymbol2eg <- id2eg(as.character(up[,5]),category="symbol",org="Hs")
up <- read.csv(file="upRegulated.csv")
#convert the eigth column(symbol) to Entrez Gene
upsymbol2eg <- id2eg(as.character(up[,5]),category="symbol",org="Hs")
print(head(upsymbol2eg))
dim(upsymbol2eg)
# save the second column of upsymbol2eg map into a vector called entrez_up
entrez_up <- upsymbol2eg[,2]
# save the second column of upsymbol2eg map into a vector called entrez_up
entrez_up <- upsymbol2eg[,3]
#convert the eigth column(symbol) to Entrez Gene
upsymbol2eg <- id2eg(as.character(up[,1]),category="symbol",org="Hs")
up <- read.csv(file="RESULTS-IBS-geneProcessing_significant.csv")
#convert the eigth column(symbol) to Entrez Gene
upsymbol2eg <- id2eg(as.character(up[,1]),category="symbol",org="Hs")
print(head(upsymbol2eg))
# save the second column of upsymbol2eg map into a vector called entrez_up
entrez_up <- upsymbol2eg[,2]
entrez_up <- as.numeric(unique(entrez_up[!is.na(entrez_up)]))
# read all the genes for background
all <- read.csv(file="RESULTS-disease-geneCompare_significant.csv")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# read all the genes for background
all <- read.csv(file="RESULTS-diseases-geneCompare_significant.csv")
allsymbol2eg <- id2eg(as.character(all[,1]),category="symbol",org="Hs")
print(head(allsymbol2eg))
# save the second column of upsymbol2eg map into a vector called entrez_all
entrez_all <- load("entrez_all.RData")
entrez_all <- as.numeric(unique(entrez_all[!is.na(entrez_all)]))
sigUpTermCC <- GOFunction(entrez_up,entrez_all,organism="org.Hs.eg.db",
ontology="CC",fdrmethod="BY",bmpSize = 4000,
filename="upSigTermCC",fdrth=0.1)
sigUpTermCC <- GOFunction(entrez_up,entrez_all,organism="org.Hs.eg.db",
ontology="CC",fdrmethod="BY",bmpSize = 4000,
filename="upSigTermCC",fdrth=0.1)
sigUpTermCC <- GOFunction(entrez_up,entrez_all,organism="org.Hs.eg.db",
ontology="CC",fdrmethod="BY",bmpSize = 4000,
filename="upSigTermCC",fdrth=0.1)
all <- read.csv(file="RESULTS-diseases-geneCompare_significant.csv")
allsymbol2eg <- id2eg(as.character(all[,1]),category="symbol",org="Hs")
print(head(allsymbol2eg))
# save the second column of upsymbol2eg map into a vector called entrez_all
entrez_all <- load("entrez_all.RData")
entrez_all <- as.numeric(unique(entrez_all[!is.na(entrez_all)]))
sigUpTermCC <- GOFunction(entrez_up,entrez_all,organism="org.Hs.eg.db",
ontology="CC",fdrmethod="BY",bmpSize = 4000,
filename="upSigTermCC",fdrth=0.1)
# There will be two output files with prefix 'upSigTermCC'
sigTerm <- GOFunction(entrez_up,entrez_all,organism="org.Hs.eg.db",
ontology="BP",fdrmethod="BH",filename="upSigTermBP",
fdrth=0.1,bmpSize = 4000)
# save the second column of upsymbol2eg map into a vector called entrez_all
entrez_all <- allsymbol2eg[,2]
entrez_all <- as.numeric(unique(entrez_all[!is.na(entrez_all)]))
sigUpTermCC <- GOFunction(entrez_up,entrez_all,organism="org.Hs.eg.db",
ontology="CC",fdrmethod="BY",bmpSize = 4000,
filename="upSigTermCC",fdrth=0.1)
sigTerm <- GOFunction(entrez_up,entrez_all,organism="org.Hs.eg.db",
ontology="BP",fdrmethod="BH",filename="upSigTermBP",
fdrth=0.1,bmpSize = 4000)
up <- read.csv(file="RESULTS-IBS-geneProcessing_significant.csv")
#convert the eigth column(symbol) to Entrez Gene
upsymbol2eg <- id2eg(as.character(up[,1]),category="symbol",org="Hs")
print(head(upsymbol2eg))
dim(upsymbol2eg)
# save the second column of upsymbol2eg map into a vector called entrez_up
entrez_up <- upsymbol2eg[,2]
entrez_up <- as.numeric(unique(entrez_up[!is.na(entrez_up)]))
# read all the genes for background
all <- read.csv(file="RESULTS-diseases-geneCompare_significant.csv")
allsymbol2eg <- id2eg(as.character(all[,1]),category="symbol",org="Hs")
print(head(allsymbol2eg))
# save the second column of upsymbol2eg map into a vector called entrez_all
entrez_all <- allsymbol2eg[,2]
entrez_all <- as.numeric(unique(entrez_all[!is.na(entrez_all)]))
# Perform gene ontology cellular component enrichment for up-regulated genes
sigUpTermCC <- GOFunction(entrez_up,entrez_all,organism="org.Hs.eg.db",
ontology="CC",fdrmethod="BY",bmpSize = 4000,
filename="IBS-GO",fdrth=0.1)
# There will be two output files with prefix 'upSigTermCC'
sigTerm <- GOFunction(entrez_up,entrez_all,organism="org.Hs.eg.db",
ontology="BP",fdrmethod="BH",filename="IBS-GO",
fdrth=0.1,bmpSize = 4000)
# There will be two output files with prefix 'upSigTermBP'
# Perform gene ontology cellular component enrichment for up-regulated genes
sigUpTermCC <- GOFunction(entrez_up,entrez_all,organism="org.Hs.eg.db",
ontology="MF",fdrmethod="BY",bmpSize = 4000,
filename="IBS-GO-MF",fdrth=0.1)
# There will be two output files with prefix 'upSigTermCC'
sigTerm <- GOFunction(entrez_up,entrez_all,organism="org.Hs.eg.db",
ontology="BP",fdrmethod="BH",filename="IBS-GO-BP",
fdrth=0.1,bmpSize = 4000)
# There will be two output files with prefix 'upSigTermBP'
# Perform gene ontology cellular component enrichment for up-regulated genes
sigUpTermCC <- GOFunction(entrez_up,entrez_all,organism="org.Hs.eg.db",
ontology="MF",fdrmethod="BY",bmpSize = 4000,
filename="IBS-GO-MF",fdrth=0.1)
# There will be two output files with prefix 'upSigTermCC'
sigTerm <- GOFunction(entrez_up,entrez_all,organism="org.Hs.eg.db",
ontology="CC",fdrmethod="BH",filename="IBS-GO-CC",
fdrth=0.1,bmpSize = 4000)
# There will be two output files with prefix 'upSigTermBP'
source("~/R/seniorProject/Deliverable4-uppala/gofunction.R")
up <- read.csv(file="RESULTS-PDAC-geneProcessing_significant.csv")
#convert the eigth column(symbol) to Entrez Gene
upsymbol2eg <- id2eg(as.character(up[,1]),category="symbol",org="Hs")
print(head(upsymbol2eg))
dim(upsymbol2eg)
# save the second column of upsymbol2eg map into a vector called entrez_up
entrez_up <- upsymbol2eg[,2]
entrez_up <- as.numeric(unique(entrez_up[!is.na(entrez_up)]))
# read all the genes for background
all <- read.csv(file="RESULTS-diseases-geneCompare_significant.csv")
allsymbol2eg <- id2eg(as.character(all[,1]),category="symbol",org="Hs")
print(head(allsymbol2eg))
# save the second column of upsymbol2eg map into a vector called entrez_all
entrez_all <- allsymbol2eg[,2]
entrez_all <- as.numeric(unique(entrez_all[!is.na(entrez_all)]))
# Perform gene ontology cellular component enrichment for up-regulated genes
sigUpTermCC <- GOFunction(entrez_up,entrez_all,organism="org.Hs.eg.db",
ontology="MF",fdrmethod="BY",bmpSize = 4000,
filename="PDAC-GO-MF",fdrth=0.1)
# There will be two output files with prefix 'upSigTermCC'
sigTerm <- GOFunction(entrez_up,entrez_all,organism="org.Hs.eg.db",
ontology="CC",fdrmethod="BH",filename="PDAC-GO-CC",
fdrth=0.1,bmpSize = 4000)
# There will be two output files with prefix 'upSigTermBP'
# Perform gene ontology cellular component enrichment for up-regulated genes
sigUpTermCC <- GOFunction(entrez_up,entrez_all,organism="org.Hs.eg.db",
ontology="BP",fdrmethod="BY",bmpSize = 4000,
filename="PDAC-GO-BP",fdrth=0.1)
# There will be two output files with prefix 'upSigTermCC'
print(getwd())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
print(list.files())
up <- read.csv(file="RESULTS-PDAC-pvalues.csv")
upsymbol2eg <- id2eg(as.character(up[,1]),category="symbol",org="Hs")
print(head(upsymbol2eg))
dim(upsymbol2eg)
print(getwd())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
print(list.files())
up <- read.csv(file="RESULTS-PDAC-pvalues.csv")
upsymbol2eg <- id2eg(as.character(up[,1]),category="symbol",org="Hs")
print(head(upsymbol2eg))
dim(upsymbol2eg)
entrez_up <- upsymbol2eg[,3]
entrez_up <- as.numeric(unique(entrez_up[!is.na(entrez_up)]))
# save the second column of upsymbol2eg map into a vector called entrez_up
entrez_up <- upsymbol2eg[,2]
entrez_up <- as.numeric(unique(entrez_up[!is.na(entrez_up)]))
# read all the genes for background
all <- read.csv(file="RESULTS-diseases-pvalues.csv")
allsymbol2eg <- id2eg(as.character(all[,1]),category="symbol",org="Hs")
print(head(allsymbol2eg))
# save the second column of upsymbol2eg map into a vector called entrez_all
entrez_all <- allsymbol2eg[,2]
entrez_all <- as.numeric(unique(entrez_all[!is.na(entrez_all)]))
p.values <- up$Pvalue
#assign entrez ids to pvalues
names(p.values) <-upsymbol2eg[,2]
#remove entries with no entrez ids
p.values <- p.values[!is.na(names(p.values))]
pv.out <- pathview(gene.data = -log10(p.values), pathway.id = "hsa05321", species = "hsa", out.suffix = "kegg_pathway")
x <- enrichPathway(gene = entrez_up, pvalueCutoff = 0.2,qvalueCutoff = 0.2, readable=T)
library(ReactomePA)
x <- enrichPathway(gene = entrez_up, pvalueCutoff = 0.2,qvalueCutoff = 0.2, readable=T)
head(data.frame(x))
# save the result into a file **reactome.up.csv**
write.table(data.frame(x), file="reactome.up.csv", quote=F, row.names=F, col.names=T)
# plot the top 10 pathways enriched (Click on svZoom to see everything in the figure)
barplot(x, showCategory = 10)
pv.out <- pathview(gene.data = -log10(p.values), pathway.id = "05200", species = "hsa", out.suffix = "kegg_pathway")
library(org.Hs.eg.db)
library(pathview)
library(ReactomePA)
print(getwd())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
print(list.files())
up <- read.csv(file="RESULTS-IBS-pvalues.csv")
upsymbol2eg <- id2eg(as.character(up[,1]),category="symbol",org="Hs")
print(head(upsymbol2eg))
dim(upsymbol2eg)
# save the second column of upsymbol2eg map into a vector called entrez_up
entrez_up <- upsymbol2eg[,2]
entrez_up <- as.numeric(unique(entrez_up[!is.na(entrez_up)]))
# read all the genes for background
all <- read.csv(file="RESULTS-diseases-pvalues.csv")
allsymbol2eg <- id2eg(as.character(all[,1]),category="symbol",org="Hs")
print(head(allsymbol2eg))
# save the second column of upsymbol2eg map into a vector called entrez_all
entrez_all <- allsymbol2eg[,2]
entrez_all <- as.numeric(unique(entrez_all[!is.na(entrez_all)]))
p.values <- up$Pvalue
#assign entrez ids to pvalues
names(p.values) <-upsymbol2eg[,2]
#remove entries with no entrez ids
p.values <- p.values[!is.na(names(p.values))]
pv.out <- pathview(gene.data = -log10(p.values), pathway.id = "hsa05321", species = "hsa", out.suffix = "kegg_pathway")
x <- enrichPathway(gene = entrez_up, pvalueCutoff = 0.2,qvalueCutoff = 0.2, readable=T)
head(data.frame(x))
# save the result into a file **reactome.up.csv**
write.table(data.frame(x), file="reactome.up.csv", quote=F, row.names=F, col.names=T)
# plot the top 10 pathways enriched (Click on svZoom to see everything in the figure)
barplot(x, showCategory = 10)
print(getwd())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
print(list.files())
up <- read.csv(file="RESULTS-PDAC-pvalues.csv")
#convert the eigth column(symbol) to Entrez Gene
upsymbol2eg <- id2eg(as.character(up[,1]),category="symbol",org="Hs")
print(head(upsymbol2eg))
dim(upsymbol2eg)
# save the second column of upsymbol2eg map into a vector called entrez_up
entrez_up <- upsymbol2eg[,2]
entrez_up <- as.numeric(unique(entrez_up[!is.na(entrez_up)]))
# read all the genes for background
all <- read.csv(file="RESULTS-diseases-pvalues.csv")
allsymbol2eg <- id2eg(as.character(all[,1]),category="symbol",org="Hs")
print(head(allsymbol2eg))
# save the second column of upsymbol2eg map into a vector called entrez_all
entrez_all <- allsymbol2eg[,2]
entrez_all <- as.numeric(unique(entrez_all[!is.na(entrez_all)]))
p.values <- up$Pvalue
#assign entrez ids to pvalues
names(p.values) <-upsymbol2eg[,2]
#remove entries with no entrez ids
p.values <- p.values[!is.na(names(p.values))]
pv.out <- pathview(gene.data = -log10(p.values), pathway.id = "hsa05212", species = "hsa", out.suffix = "kegg_pathway")
x <- enrichPathway(gene = entrez_up, pvalueCutoff = 0.2,qvalueCutoff = 0.2, readable=T)
head(data.frame(x))
# save the result into a file **reactome.up.csv**
write.table(data.frame(x), file="reactome.up.csv", quote=F, row.names=F, col.names=T)
# plot the top 10 pathways enriched (Click on svZoom to see everything in the figure)
barplot(x, showCategory = 10)
up <- read.csv(file="RESULTS-IBD-pvalues.csv")
#convert the eigth column(symbol) to Entrez Gene
upsymbol2eg <- id2eg(as.character(up[,1]),category="symbol",org="Hs")
print(head(upsymbol2eg))
dim(upsymbol2eg)
# save the second column of upsymbol2eg map into a vector called entrez_up
entrez_up <- upsymbol2eg[,2]
entrez_up <- as.numeric(unique(entrez_up[!is.na(entrez_up)]))
# read all the genes for background
all <- read.csv(file="RESULTS-diseases-pvalues.csv")
allsymbol2eg <- id2eg(as.character(all[,1]),category="symbol",org="Hs")
print(head(allsymbol2eg))
# save the second column of upsymbol2eg map into a vector called entrez_all
entrez_all <- allsymbol2eg[,2]
entrez_all <- as.numeric(unique(entrez_all[!is.na(entrez_all)]))
p.values <- up$Pvalue
#assign entrez ids to pvalues
names(p.values) <-upsymbol2eg[,2]
#remove entries with no entrez ids
p.values <- p.values[!is.na(names(p.values))]
pv.out <- pathview(gene.data = -log10(p.values), pathway.id = "hsa05321", species = "hsa", out.suffix = "kegg_pathway")
x <- enrichPathway(gene = entrez_up, pvalueCutoff = 0.2,qvalueCutoff = 0.2, readable=T)
head(data.frame(x))
# save the result into a file **reactome.up.csv**
write.table(data.frame(x), file="reactome.up.csv", quote=F, row.names=F, col.names=T)
# plot the top 10 pathways enriched (Click on svZoom to see everything in the figure)
barplot(x, showCategory = 10)
up <- read.csv(file="RESULTS-PDAC-pvalues.csv")
#convert the eigth column(symbol) to Entrez Gene
upsymbol2eg <- id2eg(as.character(up[,1]),category="symbol",org="Hs")
print(head(upsymbol2eg))
dim(upsymbol2eg)
# save the second column of upsymbol2eg map into a vector called entrez_up
entrez_up <- upsymbol2eg[,2]
entrez_up <- as.numeric(unique(entrez_up[!is.na(entrez_up)]))
# read all the genes for background
all <- read.csv(file="RESULTS-diseases-pvalues.csv")
allsymbol2eg <- id2eg(as.character(all[,1]),category="symbol",org="Hs")
print(head(allsymbol2eg))
# save the second column of upsymbol2eg map into a vector called entrez_all
entrez_all <- allsymbol2eg[,2]
entrez_all <- as.numeric(unique(entrez_all[!is.na(entrez_all)]))
p.values <- up$Pvalue
#assign entrez ids to pvalues
names(p.values) <-upsymbol2eg[,2]
#remove entries with no entrez ids
p.values <- p.values[!is.na(names(p.values))]
pv.out <- pathview(gene.data = -log10(p.values), pathway.id = "hsa05212", species = "hsa", out.suffix = "kegg_pathway")
x <- enrichPathway(gene = entrez_up, pvalueCutoff = 0.2,qvalueCutoff = 0.2, readable=T)
head(data.frame(x))
# save the result into a file **reactome.up.csv**
write.table(data.frame(x), file="reactome.up.csv", quote=F, row.names=F, col.names=T)
# plot the top 10 pathways enriched (Click on svZoom to see everything in the figure)
barplot(x, showCategory = 10)
print(getwd())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
print(list.files())
up <- read.csv(file="RESULTS-PDAC.csv")
#convert the eigth column(symbol) to Entrez Gene
upsymbol2eg <- id2eg(as.character(up[,1]),category="symbol",org="Hs")
BiocManager::install(c("GOFunction","org.Hs.eg.db","pathview","ReactomePA"))
library(org.Hs.eg.db)
library(pathview)
library(ReactomePA)
print(getwd())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
print(list.files())
up <- read.csv(file="RESULTS-PDAC.csv")
#convert the eigth column(symbol) to Entrez Gene
upsymbol2eg <- id2eg(as.character(up[,1]),category="symbol",org="Hs")
print(head(upsymbol2eg))
dim(upsymbol2eg)
# save the second column of upsymbol2eg map into a vector called entrez_up
entrez_up <- upsymbol2eg[,2]
entrez_up <- as.numeric(unique(entrez_up[!is.na(entrez_up)]))
# read all the genes for background
all <- read.csv(file="RESULTS-diseases-compiled.csv")
allsymbol2eg <- id2eg(as.character(all[,1]),category="symbol",org="Hs")
print(head(allsymbol2eg))
# save the second column of upsymbol2eg map into a vector called entrez_all
entrez_all <- allsymbol2eg[,2]
entrez_all <- as.numeric(unique(entrez_all[!is.na(entrez_all)]))
p.values <- up$microbiome_pvalue
#assign entrez ids to pvalues
names(p.values) <-upsymbol2eg[,2]
#remove entries with no entrez ids
p.values <- p.values[!is.na(names(p.values))]
pv.out <- pathview(gene.data = -log10(p.values), pathway.id = "hsa05212", species = "hsa", out.suffix = "kegg_pathway")
x <- enrichPathway(gene = entrez_up, pvalueCutoff = 0.2,qvalueCutoff = 0.2, readable=T)
head(data.frame(x))
# save the result into a file **reactome.up.csv**
write.table(data.frame(x), file="reactome.up.csv", quote=F, row.names=F, col.names=T)
# plot the top 10 pathways enriched (Click on svZoom to see everything in the figure)
barplot(x, showCategory = 10)
up <- read.csv(file="RESULTS-IBS.csv")
#convert the eigth column(symbol) to Entrez Gene
upsymbol2eg <- id2eg(as.character(up[,1]),category="symbol",org="Hs")
print(head(upsymbol2eg))
dim(upsymbol2eg)
# save the second column of upsymbol2eg map into a vector called entrez_up
entrez_up <- upsymbol2eg[,2]
entrez_up <- as.numeric(unique(entrez_up[!is.na(entrez_up)]))
# read all the genes for background
all <- read.csv(file="RESULTS-diseases-compiled.csv")
allsymbol2eg <- id2eg(as.character(all[,1]),category="symbol",org="Hs")
print(head(allsymbol2eg))
# save the second column of upsymbol2eg map into a vector called entrez_all
entrez_all <- allsymbol2eg[,2]
entrez_all <- as.numeric(unique(entrez_all[!is.na(entrez_all)]))
p.values <- up$microbiome_pvalue
names(p.values) <-upsymbol2eg[,2]
#remove entries with no entrez ids
p.values <- p.values[!is.na(names(p.values))]
pv.out <- pathview(gene.data = -log10(p.values), pathway.id = "hsa05321", species = "hsa", out.suffix = "kegg_pathway")
x <- enrichPathway(gene = entrez_up, pvalueCutoff = 0.2,qvalueCutoff = 0.2, readable=T)
head(data.frame(x))
head(data.frame(x))
# save the result into a file **reactome.up.csv**
write.table(data.frame(x), file="reactome.up.csv", quote=F, row.names=F, col.names=T)
# plot the top 10 pathways enriched (Click on svZoom to see everything in the figure)
barplot(x, showCategory = 10)
library(org.Hs.eg.db)
library(pathview)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("include.R")
up <- read.csv(file="RESULTS-IBS.csv")
#convert the eigth column(symbol) to Entrez Gene
upsymbol2eg <- id2eg(as.character(up[,1]),category="symbol",org="Hs")
print(head(upsymbol2eg))
dim(upsymbol2eg)
# save the second column of upsymbol2eg map into a vector called entrez_up
entrez_up <- upsymbol2eg[,2]
entrez_up <- as.numeric(unique(entrez_up[!is.na(entrez_up)]))
all <- read.csv(file="RESULTS-diseases-compiled.csv")
allsymbol2eg <- id2eg(as.character(all[,1]),category="symbol",org="Hs")
print(head(allsymbol2eg))
entrez_all <- allsymbol2eg[,2]
entrez_all <- as.numeric(unique(entrez_all[!is.na(entrez_all)]))
# Perform gene ontology cellular component enrichment for up-regulated genes
sigUpTermCC <- GOFunction(entrez_up,entrez_all,organism="org.Hs.eg.db",
ontology="BP",fdrmethod="BY",bmpSize = 4000,
filename="IBD-GO-BP",fdrth=0.1)
#
# Perform gene ontology cellular component enrichment for up-regulated genes
sigUpTermCC <- GOFunction(entrez_up,entrez_all,organism="org.Hs.eg.db",
ontology="MF",fdrmethod="BY",bmpSize = 4000,
filename="IBD-GO-MF",fdrth=0.1)
# Perform gene ontology cellular component enrichment for up-regulated genes
sigUpTermCC <- GOFunction(entrez_up,entrez_all,organism="org.Hs.eg.db",
ontology="CC",fdrmethod="BY",bmpSize = 4000,
filename="IBD-GO-MF",fdrth=0.1)
up <- read.csv(file="RESULTS-PDAC.csv")
#convert the eigth column(symbol) to Entrez Gene
upsymbol2eg <- id2eg(as.character(up[,1]),category="symbol",org="Hs")
print(head(upsymbol2eg))
dim(upsymbol2eg)
# save the second column of upsymbol2eg map into a vector called entrez_up
entrez_up <- upsymbol2eg[,2]
entrez_up <- as.numeric(unique(entrez_up[!is.na(entrez_up)]))
# read all the genes for background
all <- read.csv(file="RESULTS-diseases-compiled.csv")
allsymbol2eg <- id2eg(as.character(all[,1]),category="symbol",org="Hs")
print(head(allsymbol2eg))
# save the second column of upsymbol2eg map into a vector called entrez_all
entrez_all <- allsymbol2eg[,2]
entrez_all <- as.numeric(unique(entrez_all[!is.na(entrez_all)]))
# Perform gene ontology cellular component enrichment for up-regulated genes
sigUpTermCC <- GOFunction(entrez_up,entrez_all,organism="org.Hs.eg.db",
ontology="CC",fdrmethod="BY",bmpSize = 4000,
filename="PDAC-GO-MF",fdrth=0.1)
# There will be two output files with prefix 'upSigTermCC'
# Perform gene ontology cellular component enrichment for up-regulated genes
sigUpTermCC <- GOFunction(entrez_up,entrez_all,organism="org.Hs.eg.db",
ontology="MF",fdrmethod="BY",bmpSize = 4000,
filename="PDAC-GO-MF",fdrth=0.1)
# Ther
# Perform gene ontology cellular component enrichment for up-regulated genes
sigUpTermCC <- GOFunction(entrez_up,entrez_all,organism="org.Hs.eg.db",
ontology="BP",fdrmethod="BY",bmpSize = 4000,
filename="PDAC-GO-MF",fdrth=0.1)
# There will be two output files with prefix 'upSigTermCC'
up <- read.csv(file="RESULTS-PDAC.csv")
#convert the eigth column(symbol) to Entrez Gene
upsymbol2eg <- id2eg(as.character(up[,1]),category="symbol",org="Hs")
print(head(upsymbol2eg))
dim(upsymbol2eg)
# save the second column of upsymbol2eg map into a vector called entrez_up
entrez_up <- upsymbol2eg[,3]
entrez_up <- as.numeric(unique(entrez_up[!is.na(entrez_up)]))
# read all the genes for background
all <- read.csv(file="RESULTS-diseases-compiled.csv")
allsymbol2eg <- id2eg(as.character(all[,1]),category="symbol",org="Hs")
print(head(allsymbol2eg))
# save the second column of upsymbol2eg map into a vector called entrez_all
entrez_all <- allsymbol2eg[,2]
entrez_all <- as.numeric(unique(entrez_all[!is.na(entrez_all)]))
# Perform gene ontology cellular component enrichment for up-regulated genes
sigUpTermCC <- GOFunction(entrez_up,entrez_all,organism="org.Hs.eg.db",
ontology="BP",fdrmethod="BY",bmpSize = 4000,
filename="PDAC-GO-MF",fdrth=0.1)
# There will be
sigUpTermCC <- GOFunction(entrez_up,entrez_all,organism="org.Hs.eg.db",
ontology="CC",fdrmethod="BY",bmpSize = 4000,
filename="PDAC-GO-MF",fdrth=0.1)
sigUpTermCC <- GOFunction(entrez_up,entrez_all,organism="org.Hs.eg.db",
ontology="MF",fdrmethod="BY",bmpSize = 4000,
filename="PDAC-GO-MF",fdrth=0.1)
# T
up <- read.csv(file="RESULTS-IBD.csv")
#convert the eigth column(symbol) to Entrez Gene
upsymbol2eg <- id2eg(as.character(up[,1]),category="symbol",org="Hs")
print(head(upsymbol2eg))
dim(upsymbol2eg)
# save the second column of upsymbol2eg map into a vector called entrez_up
entrez_up <- upsymbol2eg[,3]
entrez_up <- as.numeric(unique(entrez_up[!is.na(entrez_up)]))
# read all the genes for background
all <- read.csv(file="RESULTS-diseases-compiled.csv")
allsymbol2eg <- id2eg(as.character(all[,1]),category="symbol",org="Hs")
print(head(allsymbol2eg))
# save the second column of upsymbol2eg map into a vector called entrez_all
entrez_all <- allsymbol2eg[,2]
entrez_all <- as.numeric(unique(entrez_all[!is.na(entrez_all)]))
# Perform gene ontology cellular component enrichment for up-regulated genes
sigUpTermCC <- GOFunction(entrez_up,entrez_all,organism="org.Hs.eg.db",
ontology="MF",fdrmethod="BY",bmpSize = 4000,
filename="PDAC-GO-MF",fdrth=0.1)
# There will be tw
sigUpTermCC <- GOFunction(entrez_up,entrez_all,organism="org.Hs.eg.db",
ontology="BP",fdrmethod="BY",bmpSize = 4000,
filename="PDAC-GO-MF",fdrth=0.1)
# There
sigUpTermCC <- GOFunction(entrez_up,entrez_all,organism="org.Hs.eg.db",
ontology="CC",fdrmethod="BY",bmpSize = 4000,
filename="PDAC-GO-MF",fdrth=0.1)
# There
